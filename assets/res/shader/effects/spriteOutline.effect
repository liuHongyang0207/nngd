// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        outlineColor: { value: [1, 1, 1, 1], editor: { type: color} }
        outlineInfo: { value: [1, 1, 1, 0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    vec4 outlineColor;
    // 描边数据 单位为pixel x:图片width y:图片height z:描边宽度 w:1表示内描边 2表示外描边
    vec4 outlineInfo;
  };

  // value在[minVal, maxVal]区间内返回1，否则返回0
  float checkEdge(float minVal, float maxVal, float value) {
    return step(minVal, value) * (1.0 - step(-value, -maxVal));
  }

  // 外描边 返回上下左右叠加的alpha
  float getOutAlpha(sampler2D texture, vec2 uv) {
    float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;
    float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;
    float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a;
    float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a;

    return left + right + top + bottom;
  }

  // 内描边 上下左右alpha全不为0时返回1，否则返回0
  float getInnerAlpha(sampler2D texture, vec2 uv) {
    float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x + outlineInfo.z / outlineInfo.x);
    float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x - outlineInfo.z / outlineInfo.x);
    float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y + outlineInfo.z / outlineInfo.y);
    float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y - outlineInfo.z / outlineInfo.y);
    return step(1.0, 1.0 - left * right * top * bottom);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    // 描边
    if (outlineInfo.w == 1.0) {
      float a = getOutAlpha(texture, v_uv0);
      o = o * o.a + vec4(outlineColor.rgb, a) * (1.0 - o.a);
    } else if (outlineInfo.w == 2.0) {
      float a = getInnerAlpha(texture, v_uv0);
      o = o * (1.0 - a) + vec4(outlineColor.rgb, o.a) * a;
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
