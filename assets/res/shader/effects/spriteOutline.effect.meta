{
  "ver": "1.0.27",
  "uuid": "c2f342df-7997-455a-bece-98c648e51e50",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 outlineColor;\nuniform vec4 outlineInfo;\nfloat checkEdge(float minVal, float maxVal, float value) {\n  return step(minVal, value) * (1.0 - step(-value, -maxVal));\n}\nfloat getOutAlpha(sampler2D texture, vec2 uv) {\n  float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;\n  float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;\n  float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a;\n  float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a;\n  return left + right + top + bottom;\n}\nfloat getInnerAlpha(sampler2D texture, vec2 uv) {\n  float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x + outlineInfo.z / outlineInfo.x);\n  float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x - outlineInfo.z / outlineInfo.x);\n  float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y + outlineInfo.z / outlineInfo.y);\n  float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y - outlineInfo.z / outlineInfo.y);\n  return step(1.0, 1.0 - left * right * top * bottom);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  if (outlineInfo.w == 1.0) {\n    float a = getOutAlpha(texture, v_uv0);\n    o = o * o.a + vec4(outlineColor.rgb, a) * (1.0 - o.a);\n  } else if (outlineInfo.w == 2.0) {\n    float a = getInnerAlpha(texture, v_uv0);\n    o = o * (1.0 - a) + vec4(outlineColor.rgb, o.a) * a;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 outlineColor;\n  vec4 outlineInfo;\n};\nfloat checkEdge(float minVal, float maxVal, float value) {\n  return step(minVal, value) * (1.0 - step(-value, -maxVal));\n}\nfloat getOutAlpha(sampler2D texture, vec2 uv) {\n  float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;\n  float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a;\n  float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a;\n  float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a;\n  return left + right + top + bottom;\n}\nfloat getInnerAlpha(sampler2D texture, vec2 uv) {\n  float right = texture2D(texture, uv + vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x + outlineInfo.z / outlineInfo.x);\n  float left = texture2D(texture, uv - vec2(outlineInfo.z / outlineInfo.x, 0.0)).a * checkEdge(0.0, 1.0, uv.x - outlineInfo.z / outlineInfo.x);\n  float top = texture2D(texture, uv + vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y + outlineInfo.z / outlineInfo.y);\n  float bottom = texture2D(texture, uv - vec2(0.0, outlineInfo.z / outlineInfo.y)).a * checkEdge(0.0, 1.0, uv.y - outlineInfo.z / outlineInfo.y);\n  return step(1.0, 1.0 - left * right * top * bottom);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  if (outlineInfo.w == 1.0) {\n    float a = getOutAlpha(texture, v_uv0);\n    o = o * o.a + vec4(outlineColor.rgb, a) * (1.0 - o.a);\n  } else if (outlineInfo.w == 2.0) {\n    float a = getInnerAlpha(texture, v_uv0);\n    o = o * (1.0 - a) + vec4(outlineColor.rgb, o.a) * a;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}